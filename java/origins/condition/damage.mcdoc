use ::java::origins::util::compare::Comparison

use super::EntityCondition

struct DamageCondition {
	type: #[id] #[dispatcher_key="origins:damage_condition"] string,
    /// If true, the condition acts invertedX
    inverted?: boolean,
	...origins:damage_condition[[type]],
}

/// # Amount
/// 
/// [Damage Condition Type](https://origins.readthedocs.io/en/latest/types/damage_condition_types)
/// 
/// Checks whether the damage is of a specified amount.
/// 
/// Type ID: `origins:amount`
/// 
/// 
/// ### Examples
/// 
/// ```json
/// "damage_condition": {
///     "type": "origins:amount",
///     "comparison": "==",
///     "compare_to": 4
/// }
/// ```
/// 
/// This example will check if the damage dealt/taken is equal to 2 hearts.
dispatch origins:damage_condition["origins:amount", "apoli:amount"] to struct Amount {
	/// Determines how the amount of damage should be compared to the specified value.
	comparison: Comparison,
	/// The value at which the amount of damage will be compared to.
	compare_to: float,
}

/// # Attacker
/// 
/// [Damage Condition Type](https://origins.readthedocs.io/en/latest/types/damage_condition_types)
/// 
/// Checks whether the damage source is from an entity.
/// 
/// Type ID: `origins:attacker`
/// 
/// 
/// ### Examples
/// 
/// ```json
/// "damage_condition": {
///     "type": "origins:attacker",
///     "entity_condition": {
///         "type": "origins:entity_type",
///         "entity_type": "minecraft:zombie"
///     }
/// }
/// ```
/// 
/// This example will check if the attacker is a Zombie entity, with the [Entity Type (Entity Condition Type)](https://origins.readthedocs.io/en/latest/types/entity_condition_types/entity_type)
dispatch origins:damage_condition["origins:attacker", "apoli:attacker"] to struct Attacker {
	/// If set, the attacker entity must fulfill the provided entity condition type in order for this condition to evaluate to true.
	entity_condition?: EntityCondition,
}

/// #   Bypasses Armor
/// 
/// [Damage Condition Type](https://origins.readthedocs.io/en/latest/types/damage_condition_types)
/// 
/// Checks whether the damage source bypasses armor.
/// 
/// Type ID: `origins:bypasses_armor`
/// 
/// !!! danger
/// 
///     This damage condition type has been <span style="color:darkred"><b>deprecated</b></span> and may be removed in a future version. Please use [In Tag (Damage Condition Type)](in_tag) instead.
/// 
/// ### Examples
/// 
/// ```json
/// "damage_condition": {
///     "type": "origins:bypasses_armor"
/// }
/// ```
dispatch origins:damage_condition["origins:bypasses_armor", "apoli:bypasses_armor"] to struct BypassesArmor {}

/// #   Explosive
/// 
/// [Damage Condition Type](https://origins.readthedocs.io/en/latest/types/damage_condition_types)
/// 
/// Checks whether the damage source is an explosive.
/// 
/// Type ID: `origins:explosive`
/// 
/// !!! danger
/// 
///     This damage condition type has been <span style="color:darkred"><b>deprecated</b></span> and may be removed in a future version. Please use [In Tag (Damage Condition Type)](in_tag) instead.
/// 
/// ### Examples
/// 
/// ```json
/// "damage_condition": {
///     "type": "origins:explosive"
/// }
/// ```
dispatch origins:damage_condition["origins:explosive", "apoli:explosive"] to struct Explosive {}

/// # Fire
/// 
/// [Damage Condition Type](https://origins.readthedocs.io/en/latest/types/damage_condition_types)
/// 
/// Checks whether the damage is fire damage (this includes lava damage!).
/// 
/// Type ID: `origins:fire`
/// 
/// !!! danger
/// 
///     This damage condition type has been <span style="color:darkred"><b>deprecated</b></span> and may be removed in a future version. Please use [In Tag (Damage Condition Type)](in_tag) instead.
/// 
/// ### Examples
/// 
/// ```json
/// "damage_condition": {
///     "type": "origins:fire"
/// }
/// ```
dispatch origins:damage_condition["origins:fire", "apoli:fire"] to struct Fire {}

/// #   From Falling
/// 
/// [Damage Condition Type](https://origins.readthedocs.io/en/latest/types/damage_condition_types)
/// 
/// Checks whether the damage source is from falling.
/// 
/// Type ID: `origins:from_falling`
/// 
/// !!! danger
/// 
///     This damage condition type has been <span style="color:darkred"><b>deprecated</b></span> and may be removed in a future version. Please use [In Tag (Damage Condition Type)](in_tag) instead.
/// 
/// ### Examples
/// 
/// ```json
/// "damage_condition": {
///     "type": "origins:from_falling"
/// }
/// ```
dispatch origins:damage_condition["origins:from_falling", "apoli:from_falling"] to struct FromFalling {}

/// # In Tag
/// 
/// [Damage Condition Type](https://origins.readthedocs.io/en/latest/types/damage_condition_types)
/// 
/// Checks whether the type of this damage is in a specified tag.
/// 
/// Type ID: `origins:in_tag`
/// 
/// 
/// !!! note
/// 
///     See [Minecraft Wiki: Damage type tag (Java Edition)](https://minecraft.wiki/w/Damage_type_tag_(Java_Edition)) for a list of of damage type tags provided/used in vanilla.
/// 
/// 
/// ### Examples
/// 
/// ```json
/// "damage_condition": {
///     "type": "origins:in_tag",
///     "tag": "minecraft:is_drowning"
/// }
/// ```
/// 
/// This example will check if the damage is considered drowning damage.
dispatch origins:damage_condition["origins:in_tag", "apoli:in_tag"] to struct InTag {
	/// The namespace and ID of the tag which the damage type should be in to pass the check.
	tag: (#[id(registry="damage_type",tags="implicit")] string | string),
}

/// # Name
/// 
/// [Damage Condition Type](https://origins.readthedocs.io/en/latest/types/damage_condition_types)
/// 
/// Checks whether the damage source uses a specific name.
/// 
/// Type ID: `origins:name`
/// 
/// 
/// ### Examples
/// 
/// ```json
/// "damage_condition": {
///     "type": "origins:name",
///     "name": "inWall"
/// }
/// ```
/// 
/// This example will check if the damage source name is `inWall`, meaning that the condition will evaluate to true if the entity is suffocating in a block.
dispatch origins:damage_condition["origins:name", "apoli:name"] to struct Name {
	/// Name the damage source should have to pass the check. See [List of Damage Source Names](https://origins.readthedocs.io/en/latest//misc/extras/damage_source_names) for possible values.
	name: DamageSourceName,
}


/// #   Out of World
/// 
/// [Damage Condition Type](https://origins.readthedocs.io/en/latest/types/damage_condition_types)
/// 
/// Checks whether the damage source is out of world.
/// 
/// Type ID: `origins:out_of_world`
/// 
/// !!! danger
/// 
///     This damage condition type has been <span style="color:darkred"><b>deprecated</b></span> and may be removed in a future version. Please use [In Tag (Damage Condition Type)](in_tag) instead.
/// 
/// ### Examples
/// 
/// ```json
/// "damage_condition": {
///     "type": "origins:out_of_world"
/// }
/// ```
dispatch origins:damage_condition["origins:out_of_world", "apoli:out_of_world"] to struct OutOfWorld {}

/// # Projectile
/// 
/// [Damage Condition Type](https://origins.readthedocs.io/en/latest/types/damage_condition_types)
/// 
/// Checks whether the damage source was projectile damage, and optionally the type of projectile it was (if specified).
/// 
/// Type ID: `origins:projectile`
/// 
/// 
/// ### Examples
/// 
/// ```json
/// "damage_condition": {
///     "type": "origins:projectile",
///     "projectile": "minecraft:spectral_arrow"
/// }
/// ```
/// 
/// This example will check if the damage source is a Spectral Arrow projectile entity.
/// <br>
/// 
/// ```json
/// "damage_condition": {
///     "type": "origins:projectile",
///     "projectile_condition": {
///       "type": "origins:and",
///       "conditions": [
///         {
///           "type": "origins:entity_type",
///           "entity_type": "minecraft:arrow"
///         },
///         {
///           "type": "origins:on_fire"
///         }
///       ]
///     }
/// }
/// ```
/// 
/// This example will check if the damage source is a burning arrow.
dispatch origins:damage_condition["origins:projectile", "apoli:projectile"] to struct Projectile {
	/// If set, the check will only pass if the projectile was of an entity type with the specified namespace and ID.
	projectile?: (#[id="entity_type"] string | string),
	/// If set, the check will only pass if the projectile entity fulfills this condition.
	projectile_condition?: EntityCondition,
}

/// #	Type
/// 
/// [Damage Condition Type](https://origins.readthedocs.io/en/latest/types/damage_condition_types)
/// 
/// Checks whether the damage source is of a certain damage type.
/// 
/// Type ID: `origins:type`
/// 
/// 
/// ###	Examples
/// 
/// ```json
/// "damage_condition": {
/// 	"type": "origins:type",
/// 	"damage_type": "minecraft:magic"
/// }
/// ```
/// 
/// This example will check if the damage source is of the `minecraft:magic` damage type.
dispatch origins:damage_condition["origins:type", "apoli:type"] to struct Type {
	/// The ID of the damage type to compare the damage source to.
	damage_type: (#[id="damage_type"] string | string),
}

/// #   Unblockable
/// 
/// [Damage Condition Type](https://origins.readthedocs.io/en/latest/types/damage_condition_types)
/// 
/// Checks whether the damage source is unblockable.
/// 
/// Type ID: `origins:unblockable`
/// 
/// !!! danger
/// 
///     This damage condition type has been <span style="color:darkred"><b>deprecated</b></span> and may be removed in a future version. Please use [In Tag (Damage Condition Type)](in_tag) instead.
/// 
/// ### Examples
/// 
/// ```json
/// "damage_condition": {
///     "type": "origins:unblockable"
/// }
/// ```
dispatch origins:damage_condition["origins:unblockable", "apoli:unblockable"] to struct Unblockable {}


enum(string) DamageSourceName {
	/// Being hit by a falling Anvil.
	anvil = "anvil",
	/// Being hit by a falling Anvil while fighting a player/mob.
	anvilPlayer = "anvil.player",
	/// Being shot by a player/mob.
	arrow = "arrow",
	/// Being shot by a player/mob using a renamed Bow or Crossbow.
	arrowItem = "arrow.item",
	/// Being hit by an explosion caused by Beds from attempting to use it in The End, The Nether or custom dimensions that has Beds disabled.
	badRespawnPoint = "badRespawnPoint",
	/// Making contact with a Cactus.
	cactus = "cactus",
	/// Making contact with a Cactus while fighting a player/mob.
	cactusPlayer = "cactus.player",
	/// Being in the same spot as many other entities.
	cramming = "cramming",
	/// Being in the same spot as many other entities while fighting a player/mob.
	crammingPlayer = "cramming.player",
	/// Being damaged by the Dragon's breath. Unused in vanilla. (Dragon breath deals magic damage).
	dragonBreath = "dragonBreath",
	/// Being damaged by the Dragon's breath while fighting a player/mob. Unused in vanilla. (Dragon breath deals magic damage).
	dragonBreathPlayer = "dragonBreath.player",
	/// Drowning.
	drown = "drown",
	/// Drowning while fighting a player/mob.
	drownPlayer = "drown.player",
	/// Drying out. Unused in vanilla.
	dryout = "dryout",
	/// Drying out while fighting a player/mob. Unused in vanilla.
	dryoutPlayer = "dryout.player",
	/// If the death message is too large to send. Unused in vanilla.
	even_more_magic = "even_more_magic",
	/// Being hit by a regular explosion.
	explosion = "explosion",
	/// Being hit by an explosion from a mob that explodes or TNT lit by a player/mob.
	explosionPlayer = "explosion.player",
	/// Falling from a high place.
	fall = "fall",
	/// Falling from a high place while fighting a player/mob.
	fallPlayer = "fall.player",
	/// Being hit by a falling block that's not an Anvil block.
	fallingBlock = "fallingBlock",
	/// Being hit by a falling block that's not an Anvil block while fighting a player/mob.
	fallingBlockPlayer = "fallingBlock.player",
	/// Being hit by a falling Stalactite block.
	fallingStalactite = "fallingStalactite",
	/// Being hit by a falling Stalactite block while fighting a player/mob.
	fallingStalactitePlayer = "fallingStalactite.player",
	/// Being hit by a fireball shot by a player/mob.
	fireball = "fireball",
	/// Being hit by a fireball shot by a player/mob holding a renamed item.
	fireballItem = "fireball.item",
	/// Being hit by a firework explosion of a firework rocket.
	fireworks = "fireworks",
	/// Being hit by a firework explosion of a firework rocket while fighting with a player/mob.
	fireworksPlayer = "fireworks.player",
	/// Being hit by a firework explosion of a firework rocket shot by a player/mob using a renamed Crossbow.
	fireworksItem = "fireworks.item",
	/// Flying into a wall at high speed using an Elytra.
	flyIntoWall = "flyIntoWall",
	/// Flying into a wall at high speed using an Elytra while fighting a player/mob.
	flyIntoWallPlayer = "flyIntoWall.player",
	/// Being in Powder Snow for too long.
	freeze = "freeze",
	/// Being in Powder Snow for too long while fighting a player/mob.
	freezePlayer = "freeze.player",
	/// Being damaged by a damage source which doesn't have a specific type.
	generic = "generic",
	/// Being damaged by a damage source which doesn't have a specific type while fighting a player/mob.
	genericPlayer = "generic.player",
	/// Standing on Magma.
	hotFloor = "hotFloor",
	/// Standing on Magma while fighting a player/mob.
	hotFloorPlayer = "hotFloor.player",
	/// Being damaged by a damage source considered as indirect magic damage such as from thrown Splash Potions.
	indirectMagic = "indirectMagic",
	/// Being damaged by a damage source considered as indirect magic damage such as from thrown Splash Potions whilst fighting a player/mob holding a renamed item.
	indirectMagicItem = "indirectMagic.item",
	/// Standing inside Fire.
	inFire = "inFire",
	/// Standing inside Fire whilst fighting a player/mob.
	inFirePlayer = "inFire.player",
	/// Being inside a solid block.
	inWall = "inWall",
	/// Being inside a solid block while fighting a player/mob.
	inWallPlayer = "inWall.player",
	/// Being in Lava.
	lava = "lava",
	/// Being in Lava while fighting a player/mob.
	lavaPlayer = "lava.player",
	/// Being struck by a Lightning Bolt.
	lightningBolt = "lightningBolt",
	/// Being struck by a Lightning Bolt while fighting a player/mob.
	lightningBoltPlayer = "lightningBolt.player",
	/// Being damaged by a damage source considered as magic damage such as from Conduits or harmful status effects like Instant Damage or Poison.
	magic = "magic",
	/// Being damaged by a damage source considered as magic damage such as from Conduits or harmful status effects like Instant Damage or Poison while fighting a player/mob.
	magicPlayer = "magic.player",
	/// Being hit by a mob.
	mob = "mob",
	/// Being hit by a mob holding a renamed item.
	mobItem = "mob.item",
	/// Burning.
	onFire = "onFire",
	/// Burning while fighting a player/mob.
	onFirePlayer = "onFire.player",
	/// Falling into the void.
	outOfWorld = "outOfWorld",
	/// Falling into the void while fighting a player/mob.
	outOfWorldPlayer = "outOfWorld.player",
	/// Being hit by a player.
	player = "player",
	/// Being hit by a player holding a renamed item.
	playerItem = "player.item",
	/// Being hit by a Warden's Sonic Boom.
	sonic_boom = "sonic_boom",
	/// Being hit by a Warden's Sonic Boom whilst fighting a player/mob.
	sonic_boomPlayer = "sonic_boom.player",
	/// Being hit by a Warden's Sonic Boom whilst fighting a player/mob using a renamed item.
	sonic_boomItem = "sonic_boom.item",
	/// Falling onto a Stalagmite.
	stalagmite = "stalagmite",
	/// Falling onto a Stalagmite while fighting a player/mob.
	stalagmitePlayer = "stalagmite.player",
	/// Being damaged by starvation.
	starve = "starve",
	/// Being damaged by starvation while fighting a player/mob.
	starvePlayer = "starve.player",
	/// Being stung by a bee.
	sting = "sting",
	/// Being stung by a player/mob. Unused in vanilla.
	stingPlayer = "sting.player",
	/// Being stung by a player/mob holding a renamed item. Unused in vanilla.
	stingItem = "sting.item",
	/// Walking through a Sweet Berry Bush.
	sweetBerryBush = "sweetBerryBush",
	/// Walking through a Sweet Berry Bush while fighting a player/mob.
	sweetBerryBushPlayer = "sweetBerryBush.player",
	/// Hitting a player/mob that is wearing an armor with the Thorns enchantment. Also applies to hurting Guardians/Elder Guardians.
	thorns = "thorns",
	/// Hitting a player/mob that is wearing an armor with the Thorns enchantment, and holding a renamed item. Also applies to hurting Guardians/Elder Guardians.
	thornsItem = "thorns.item",
	/// Being hit by a projectile thrown by a player/mob. Unused in vanilla.
	thrownItem = "thrown.item",
	/// Being hit by a Trident thrown by a player/mob.
	trident = "trident",
	/// Being hit by a Trident thrown by a player/mob holding a renamed item.
	tridentItem = "trident.item",
	/// Being damaged by the Wither status effect.
	wither = "wither",
	/// Being damaged by the Wither status effect while fighting a player/mob.
	witherPlayer = "wither.player",
	/// Being hit by a Wither Skull shot by a player/mob.
	witherSkull = "witherSkull",
	/// f Origins damage source names
	List = "List",
	/// Description
	Name = "Name",
	/// Being damaged by a power that uses the origins:damage_over_time power type with no specified damage source name.
	genericDamageOverTime = "genericDamageOverTime",
	/// Being damaged by a power that uses the origins:damage_over_time power type with no specified damage source name while fighting a player/mob.
	genericDamageOverTimePlayer = "genericDamageOverTime.player",
	/// Being damaged by the origins:water_vulnerability power.
	hurt_by_water = "hurt_by_water",
	/// Being damaged by the origins:water_vulnerability power whilst fighting a player/mob.
	hurt_by_waterPlayer = "hurt_by_water.player",
	/// Losing air with the origins:water_breathing power.
	no_water_for_gills = "no_water_for_gills",
	/// Losing air with the origins:water_breathing power while fighting a player/mob.
	no_water_for_gillsPlayer = "no_water_for_gills.player",
}