use ::java::util::slot::EquipmentSlot
use ::java::data::advancement::trigger::TriggerBase
use ::java::data::advancement::trigger::Conditions
use ::java::data::advancement::Trigger

dispatch minecraft:loot_condition[origins:origin] to struct OriginCondition {
  /// Checks if the player has the specified origin.
	origin: #[id="origins:origin"] string,
  /// If specified, checks if the specified origin is from this origin layer.
  layer?: #[id="origins:origin_layer"] string,
}

dispatch minecraft:loot_condition[apoli:power] to struct PowerCondition {
  /// Checks if the entity has the specified power.
  power: #[id="origins:power"] string,
  /// If specified, checks if the specified power is from this power source.
  source?: #[id(registry="origins:source")] string,
}

// Still waiting for it to work...
inject enum(string) ::java::data::advancement::Trigger {
  ChoseOrigin = "origins:chose_origin"
}

/// Player has choosen specified origin
dispatch minecraft:trigger[origins:chose_origin] to Conditions<struct ChoseOrigin {
	...TriggerBase,
	origin: #[id="origins:origin"] string,
}>

dispatch minecraft:loot_function[apoli:add_power] to struct AddPower {
	power: #[id="origins:power"] string,
  /// Determines if the item should add the power to the entity if held/equipped in the specified equipment slot.
  slot: EquipmentSlot,
  /// Determines if the tooltip for the power should be hidden or not.
  hidden?: boolean,
  /// Determines if the color of the tooltip should be blue (false) or red (true).
  negative?: boolean,
}

dispatch minecraft:loot_function[apoli:remove_power] to struct RemovePower {
	power: #[id="origins:power"] string,
  slot: EquipmentSlot,
}