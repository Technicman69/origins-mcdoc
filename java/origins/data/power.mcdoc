use ::java::util::text::Text

use ::java::origins::data::badge::Badge
use ::java::origins::util::key::Key
use ::java::origins::util::sprite::ResourceBarFile
use ::java::origins::condition::EntityCondition
use ::java::origins::action::EntityAction

dispatch minecraft:resource["origins:power"] to struct Power {
	type: #[id] PowerType,
    /// The display name of the power.
    name?: Text,
    /// The description of the power.
    description?: Text,
    /// If set to true, this power will not be displayed in the power list of the origin.
    hidden?: boolean,
    /// If set, this power will only be active when the player with this power fulfills the condition.
    condition?: EntityCondition,
    /// Specifies when this power is loaded. Higher numbers mean it's loaded later, which means it will override those with lower loading priorities which share the same ID.
    loading_priority?: int,
    /// If set, it will display icon(s) after the name of the power.
    badges?: [Badge],
	...origins:power[[type]],
}

dispatch origins:power[%unknown] to struct {}

dispatch origins:power["origins:simple", "apoli:simple"] to struct Simple {}

dispatch origins:power["origins:cooldown", "apoli:cooldown"] to struct Cooldown {
    /// Interval of ticks this power needs to recharge before the power can be triggered again.
    cooldown: int @ 1..,
    /// Determines how the cooldown of this power is visualized on the HUD.
    hud_render?: HudRender,
}

struct OptionalCooldown {
    /// Interval of ticks this power needs to recharge before the power can be triggered again.
    cooldown?: int @ 1..,
    /// Determines how the cooldown of this power is visualized on the HUD.
    hud_render?: HudRender,
}

dispatch origins:power["origins:multiple", "apoli:multiple"] to struct Multiple {
    [#[subpower(definition=true)] string]: Power,
}

/// Example doc comment
dispatch origins:power["origins:active_self", "apoli:active_self"] to struct ActiveSelf {
    ...OptionalCooldown,
    /// The action to execute on the player.
    entity_action: EntityAction,
    /// Which active key this power should respond to.
    key: Key,
}

struct HudRender {
    /// Whether the bar should be visible or not.
    should_render?: boolean,
    /// The path to the file in the assets which contains what the bar looks like. See the List of sprites for a list of files included by default in the mod.
    sprite_location?: ResourceBarFile,
    /// The indexed position of the bar on the sprite to use. Please note that indexes start at 0.
    bar_index?: int @ 0..,
    /// The indexed position of the icon on the sprite to use. Please note that indexes start at 0.
    icon_index?: int @ 0..,
    /// If set (and should_render is true), the bar will only display when the entity with the power fulfills this condition.
    condition?: EntityCondition,
    /// If set to true, inverts the way the hud render process (it'll look like its value is being decreased).
    inverted?: boolean,
    /// If specified, this determines the position of the HUD render when being rendered. The higher the order value is, the higher it is on the rendered HUD render stack.
    order?: int,
}

enum(string) PowerType {
	Simple = "origins:simple", ApoliSimple = "apoli:simple",
    Cooldown = "origins:cooldown", ApoliCooldown = "apoli:cooldown",
    ActiveSelf = "origins:active_self", ApoliActiveSelf = "apoli:active_self",
    Multiple = "origins:multiple", ApoliMultiple = "apoli:multiple",
}