use ::java::util::text::Text

use ::java::origins::util::item::ItemStack
use ::java::origins::data::power::Power

dispatch minecraft:resource["origins:origin"] to struct Origin {
	/// The namespace and IDs of the powers this origin should have.
	powers?: [#[id="origins:power"] string],
	/// The item stack which is displayed as the icon for the origin in the top-left corner of the choose/view origin screen.
	icon?: (
		ItemStack |
		#[id="item"] string |
	),
	/// If set to true, this origin will not show up in any origin layer to choose it, but it will still be able to be set for that layer with a command or via an origin upgrade.
	unchoosable?: boolean,
	/// Specifies the position of this origin in the choose origin screen among the other origins with the same impact in the layer. If not specified, will be a really large number - basically adding it in the end.
	order?: int,
	/// Specifies the impact of this origin with a number from 0 (none) to 3 (high).
	impact?: int @ 0..3,
	/// The display name of the origin
	name?: Text,
	/// The description of the origin.
	description?: Text,
	/// A list of upgrades for this origin, specifying which advancements turn this origin into which other origin.
	upgrades?: [Upgrade],
	/// Specifies when this origin is loaded. Higher numbers mean it's loaded later, which means it will override those with lower loading priorities which share the same ID.
	loading_priority?: int,
}

struct Upgrade {
    /// The namespace and ID of an advancement which should trigger this upgrade.
    condition: #[id="advancement"] string,
    /// The namespace and ID of an origin the origin with this upgrade should upgrade to.
    origin: #[id="origins:origin"] string,
    /// A text which will show up in the local chat of the player in a pretty color. If none is specified, there won't be a message.
    announcement?: string,
}